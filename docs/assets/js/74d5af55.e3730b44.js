"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9716],{612:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});var o=t(7624),s=t(2172);const i={sidebar_position:2},c="Core Concepts",r={id:"project/core-concepts",title:"Core Concepts",description:"Store",source:"@site/docs/project/core-concepts.md",sourceDirName:"project",slug:"/project/core-concepts",permalink:"/mute8/docs/project/core-concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/PawelJastrzebski/mute8/docs/project/core-concepts.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"project",previous:{title:"Motivation",permalink:"/mute8/docs/project/motivation"},next:{title:"Getting Started",permalink:"/mute8/docs/project/getting-started"}},a={},l=[{value:"Store",id:"store",level:2},{value:"Action",id:"action",level:2},{value:"Asynchronous action",id:"asynchronous-action",level:2},{value:"Subscription",id:"subscription",level:2},{value:"Mutation",id:"mutation",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,o.jsx)(n.h2,{id:"store",children:"Store"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Single unit of state. Think of it as a service that combines immutable data (state), synchronous actions for manipulating that data, and asynchronous actions for handling requests."}),"\n"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"value"})," field contains the initial state properties."]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"actions"})," field allows you to define methods to modify the state synchronously."]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"async"})," field enables the definition of asynchronous methods to handle async operations."]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"plugin"})," field is optional and allows you to add plugins to customize or extend the store's behavior."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'import { newStore } from "mute8";\n\nconst store = newStore({\n    value: {\n        name: "ok",\n    },\n});\n'})}),"\n",(0,o.jsx)(n.h2,{id:"action",children:"Action"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"A function operating within the context of a mutable state snapshot, crafting the illusion of mutability and offering a straightforward approach to manipulate data without adding unnecessary boilerplate code."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Actions are defined to encapsulate functionality. They can be used to perform complex operations while maintaining a clean separation of concerns."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const store = newStore({\n    value: {\n        cars: [] as Car[],\n    },\n    actions: {\n        addCar(car: Car) {\n            this.cars.push(car);\n        },\n        removeCar(id: number) {\n            this.cars = this.cars.filter(c => c.id != id);\n        },\n    },\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"asynchronous-action",children:"Asynchronous action"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"An asynchronous action is a function designed for handling asynchronous operations, like fetching data from an API. It operates within the context of a small proxy, ensuring, secure manipulation and access to the present state."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const store = newStore({\n    value: {\n        fetchCount: 0\n    },\n    async: {\n        async fetchData() {\n            // Simulating an asynchronous operation\n            await new Promise(resolve => setTimeout(resolve, 100));\n            this.mut(v => v.fetchCount++);\n        },\n    },\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"subscription",children:"Subscription"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"A subscription allows you to observe and react to changes in the state, providing a means to listen for any alterations in the data."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const sub = store.sub((newState) => {\n    console.log('State changed: ', newState);\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"mutation",children:"Mutation"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Method enabling you to pass an anonymous action and modify the state."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Different ways to modify the state:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Using the ",(0,o.jsx)(n.code,{children:"mut()"})," method with a function."]}),"\n",(0,o.jsxs)(n.li,{children:["Using the setter ",(0,o.jsx)(n.code,{children:"mut"})," property."]}),"\n",(0,o.jsx)(n.li,{children:"Directly setting a property of the state."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"// Anonymous action\nstore.mut(v => v.fetchCount = 42);\n// Setter\nstore.mut = {\n    fetchCount: 42,\n}\n// Directly\nstore.fetchCount = 42,\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},2172:(e,n,t)=>{t.d(n,{I:()=>r,M:()=>c});var o=t(1504);const s={},i=o.createContext(s);function c(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);